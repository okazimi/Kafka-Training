/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.example;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class TestRecord extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -3024116746561245597L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"TestRecord\",\"namespace\":\"com.example\",\"fields\":[{\"name\":\"firstFieldV2\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"default\"},{\"name\":\"secondField\",\"type\":\"int\",\"default\":1},{\"name\":\"thirdField\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"default\":\"wawaweewa\"}],\"version\":2}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<TestRecord> ENCODER =
      new BinaryMessageEncoder<TestRecord>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<TestRecord> DECODER =
      new BinaryMessageDecoder<TestRecord>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<TestRecord> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<TestRecord> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<TestRecord> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<TestRecord>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this TestRecord to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a TestRecord from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a TestRecord instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static TestRecord fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.String firstFieldV2;
  private int secondField;
  private java.lang.String thirdField;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public TestRecord() {}

  /**
   * All-args constructor.
   * @param firstFieldV2 The new value for firstFieldV2
   * @param secondField The new value for secondField
   * @param thirdField The new value for thirdField
   */
  public TestRecord(java.lang.String firstFieldV2, java.lang.Integer secondField, java.lang.String thirdField) {
    this.firstFieldV2 = firstFieldV2;
    this.secondField = secondField;
    this.thirdField = thirdField;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return firstFieldV2;
    case 1: return secondField;
    case 2: return thirdField;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: firstFieldV2 = value$ != null ? value$.toString() : null; break;
    case 1: secondField = (java.lang.Integer)value$; break;
    case 2: thirdField = value$ != null ? value$.toString() : null; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'firstFieldV2' field.
   * @return The value of the 'firstFieldV2' field.
   */
  public java.lang.String getFirstFieldV2() {
    return firstFieldV2;
  }



  /**
   * Gets the value of the 'secondField' field.
   * @return The value of the 'secondField' field.
   */
  public int getSecondField() {
    return secondField;
  }



  /**
   * Gets the value of the 'thirdField' field.
   * @return The value of the 'thirdField' field.
   */
  public java.lang.String getThirdField() {
    return thirdField;
  }



  /**
   * Creates a new TestRecord RecordBuilder.
   * @return A new TestRecord RecordBuilder
   */
  public static com.example.TestRecord.Builder newBuilder() {
    return new com.example.TestRecord.Builder();
  }

  /**
   * Creates a new TestRecord RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new TestRecord RecordBuilder
   */
  public static com.example.TestRecord.Builder newBuilder(com.example.TestRecord.Builder other) {
    if (other == null) {
      return new com.example.TestRecord.Builder();
    } else {
      return new com.example.TestRecord.Builder(other);
    }
  }

  /**
   * Creates a new TestRecord RecordBuilder by copying an existing TestRecord instance.
   * @param other The existing instance to copy.
   * @return A new TestRecord RecordBuilder
   */
  public static com.example.TestRecord.Builder newBuilder(com.example.TestRecord other) {
    if (other == null) {
      return new com.example.TestRecord.Builder();
    } else {
      return new com.example.TestRecord.Builder(other);
    }
  }

  /**
   * RecordBuilder for TestRecord instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<TestRecord>
    implements org.apache.avro.data.RecordBuilder<TestRecord> {

    private java.lang.String firstFieldV2;
    private int secondField;
    private java.lang.String thirdField;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.example.TestRecord.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.firstFieldV2)) {
        this.firstFieldV2 = data().deepCopy(fields()[0].schema(), other.firstFieldV2);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.secondField)) {
        this.secondField = data().deepCopy(fields()[1].schema(), other.secondField);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.thirdField)) {
        this.thirdField = data().deepCopy(fields()[2].schema(), other.thirdField);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
    }

    /**
     * Creates a Builder by copying an existing TestRecord instance
     * @param other The existing instance to copy.
     */
    private Builder(com.example.TestRecord other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.firstFieldV2)) {
        this.firstFieldV2 = data().deepCopy(fields()[0].schema(), other.firstFieldV2);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.secondField)) {
        this.secondField = data().deepCopy(fields()[1].schema(), other.secondField);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.thirdField)) {
        this.thirdField = data().deepCopy(fields()[2].schema(), other.thirdField);
        fieldSetFlags()[2] = true;
      }
    }

    /**
      * Gets the value of the 'firstFieldV2' field.
      * @return The value.
      */
    public java.lang.String getFirstFieldV2() {
      return firstFieldV2;
    }


    /**
      * Sets the value of the 'firstFieldV2' field.
      * @param value The value of 'firstFieldV2'.
      * @return This builder.
      */
    public com.example.TestRecord.Builder setFirstFieldV2(java.lang.String value) {
      validate(fields()[0], value);
      this.firstFieldV2 = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'firstFieldV2' field has been set.
      * @return True if the 'firstFieldV2' field has been set, false otherwise.
      */
    public boolean hasFirstFieldV2() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'firstFieldV2' field.
      * @return This builder.
      */
    public com.example.TestRecord.Builder clearFirstFieldV2() {
      firstFieldV2 = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'secondField' field.
      * @return The value.
      */
    public int getSecondField() {
      return secondField;
    }


    /**
      * Sets the value of the 'secondField' field.
      * @param value The value of 'secondField'.
      * @return This builder.
      */
    public com.example.TestRecord.Builder setSecondField(int value) {
      validate(fields()[1], value);
      this.secondField = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'secondField' field has been set.
      * @return True if the 'secondField' field has been set, false otherwise.
      */
    public boolean hasSecondField() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'secondField' field.
      * @return This builder.
      */
    public com.example.TestRecord.Builder clearSecondField() {
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'thirdField' field.
      * @return The value.
      */
    public java.lang.String getThirdField() {
      return thirdField;
    }


    /**
      * Sets the value of the 'thirdField' field.
      * @param value The value of 'thirdField'.
      * @return This builder.
      */
    public com.example.TestRecord.Builder setThirdField(java.lang.String value) {
      validate(fields()[2], value);
      this.thirdField = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'thirdField' field has been set.
      * @return True if the 'thirdField' field has been set, false otherwise.
      */
    public boolean hasThirdField() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'thirdField' field.
      * @return This builder.
      */
    public com.example.TestRecord.Builder clearThirdField() {
      thirdField = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public TestRecord build() {
      try {
        TestRecord record = new TestRecord();
        record.firstFieldV2 = fieldSetFlags()[0] ? this.firstFieldV2 : (java.lang.String) defaultValue(fields()[0]);
        record.secondField = fieldSetFlags()[1] ? this.secondField : (java.lang.Integer) defaultValue(fields()[1]);
        record.thirdField = fieldSetFlags()[2] ? this.thirdField : (java.lang.String) defaultValue(fields()[2]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<TestRecord>
    WRITER$ = (org.apache.avro.io.DatumWriter<TestRecord>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<TestRecord>
    READER$ = (org.apache.avro.io.DatumReader<TestRecord>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.firstFieldV2);

    out.writeInt(this.secondField);

    out.writeString(this.thirdField);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.firstFieldV2 = in.readString();

      this.secondField = in.readInt();

      this.thirdField = in.readString();

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.firstFieldV2 = in.readString();
          break;

        case 1:
          this.secondField = in.readInt();
          break;

        case 2:
          this.thirdField = in.readString();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










